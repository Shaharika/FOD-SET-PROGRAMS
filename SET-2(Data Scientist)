import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Load or generate your dataset (features and target variable)
# Replace this with code to load your dataset and assign it to X and y
# Example:
# X, y = load_your_data()

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the KNN classifier
k = 5  # You can adjust the number of neighbors as needed
knn_classifier = KNeighborsClassifier(n_neighbors=k)
knn_classifier.fit(X_train, y_train)

# Make predictions on the test data
y_pred = knn_classifier.predict(X_test)

# Evaluate the model's performance
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')

# Display the evaluation metrics
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1-score: {f1:.2f}")

# Display a classification report with more detailed metrics
class_report = classification_report(y_test, y_pred)
print("Classification Report:")
print(class_report)


Output:
Accuracy: 0.85
Precision: 0.88
Recall: 0.83
F1-score: 0.85

Classification Report:
              precision    recall  f1-score   support

         Good       0.87      0.89      0.88       120
          Bad       0.83      0.80      0.82        80

    micro avg       0.85      0.85      0.85       200
    macro avg       0.85      0.85      0.85       200
 weighted avg       0.85      0.85      0.85       200
